const fs = require('fs'); // For file system operations
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const input = require('input'); // For input data
const say = require('say');
const { NewMessage } = require('telegram/events'); // Import NewMessage event
const WebSocket = require('ws');
const ncp = require("copy-paste");
const sessionFilePath = 'session.txt'; // Session file path

const wsConfig = loadConfig();
const notifier = require('node-notifier');
 
// –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const ws1m = wsConfig['1m'] ? new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@kline_1m') : null;
const ws2m = wsConfig['2m'] ? new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@kline_2m') : null;
const ws5m = wsConfig['5m'] ? new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@kline_5m') : null;
const ws1h = wsConfig['1h'] ? new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@kline_1h') : null;
const ws4h = wsConfig['4h'] ? new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@kline_4h') : null;
const ws1d = wsConfig['1d'] ? new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@kline_1d') : null;
const ws1M = wsConfig['1M'] ? new WebSocket('wss://stream.binance.com:9443/ws/btcusdt@kline_1M') : null;
const apiId = wsConfig['apiId'];
const apiHash = wsConfig['apiHash'];

const phoneNumber = wsConfig['telegram_acc'];

console.error = function() {}; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤—ã–∑–æ–≤—ã console.error

// Load session from file if it exists
let session = new StringSession('');
if (fs.existsSync(sessionFilePath)) {
    session = new StringSession(fs.readFileSync(sessionFilePath, 'utf8'));
}

function speakText(text) {
    say.speak(text, 'Victoria');
}

(async () => {
    const client = new TelegramClient(session, apiId, apiHash, {
        connectionRetries: 5,
    });

    try {
        console.log('Connecting to Telegram...');
        await client.start({
            phoneNumber: async () => phoneNumber,
            phoneCode: async () => await input.text('Enter the code from SMS: '),
            onError: (err) => console.log(err),
        });

        fs.writeFileSync(sessionFilePath, client.session.save(), 'utf8');
        console.log('Session saved to file.');
        console.log('You are now connected.');

        const group = await client.getEntity('@sharpenerobserver'); // Use the correct username

        // Handler for new messages
        client.addEventHandler(async (event) => {
            const message = event.message;
            if (!message) return; // Ensure there's a message

            let parts = "";
            const msg = message.message || "";
            const data = msg.replace("üî¥", "").replace("üü¢", "").replace("USDT", "");
            let timeFrame = "";

            if (data.includes(" 5m ")) {
                parts = data.split(' 5m ');
                timeFrame = " in 5 minutes";
            } else if (data.includes(" 1m ")) {
                parts = data.split(' 1m ');
                timeFrame = " in 1 minute";
            }

            const ticker = parts[0].charAt(0).toUpperCase() + parts[0].slice(1).toLowerCase();
            const percentChange = parts[1];
            messageToShow = "";

            console.log(ticker + " " + percentChange);

            if (msg.includes("üî¥")) {
                messageToShow = ticker + " dropped by " + percentChange + timeFrame; 
            } else if (msg.includes("üü¢")) {
                messageToShow = ticker + " raised by " + percentChange + timeFrame;
            } else {
                messageToShow = ticker + " changed by " + percentChange + timeFrame;
            }
            ncp.copy(ticker, function () { })
            speakText(messageToShow);

            notifier.notify({
                title: 'Shadow Pool Alert',
                message: messageToShow,
                timeout: 8,
              });
        }, new NewMessage({}));

        console.log('Parser is running and listening for messages...');
    } catch (error) {
        console.error('An error occurred:', error);
    }
})().catch(console.error);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
function loadConfig() {
  const rawData = fs.readFileSync('config.json'); // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  return JSON.parse(rawData); // –ü–∞—Ä—Å–∏–Ω–≥ JSON
}


 

// –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ—á–µ–π
let lastTransition = {
  '1m': false,
  '2m': false,
  '5m': false,
  '1h': false,
  '4h': false,
  '1d': false,
  '1M': false
};

let isBlocked = false; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ —Å—Ç–∞—Ä—à–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
const shouldNotify = (interval) => {
  const intervals = {
    '1m': 1,
    '2m': 2,
    '5m': 3,
    '1h': 4,
    '4h': 5,
    '1d': 6,
    '1M': 7
  };

  for (const key of Object.keys(intervals).reverse()) {
    if (lastTransition[key] && intervals[key] > intervals[interval]) {
      return false; // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–∞—Ä—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º
    }
  }
  return true; // –ï—Å–ª–∏ –≤—Å–µ —Å—Ç–∞—Ä—à–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
const processTransition = async (interval, message, voiceMessage) => {
  if (!isBlocked && shouldNotify(interval)) {
    isBlocked = true;
    console.log(`--- ${message} ---`);
    say.speak(voiceMessage);
    lastTransition[interval] = true;

    await delay(800); // –ó–∞–¥–µ—Ä–∂–∫–∞ 800 –º—Å
    isBlocked = false; // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
const handleMessage = (interval, message, voiceMessage) => (data) => {
  const json = JSON.parse(data);
  const kline = json.k;

  if (kline.x) {
    processTransition(interval, message, voiceMessage);
  } else {
    lastTransition[interval] = false;
  }
};

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
if (ws1m) ws1m.on('message', handleMessage('1m', `–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è 1-–º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞ –≤ ${new Date().toLocaleTimeString()}`, 'One minute transition'));
if (ws2m) ws2m.on('message', handleMessage('2m', `–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è 2-–º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞ –≤ ${new Date().toLocaleTimeString()}`, 'Two minute transition'));
if (ws5m) ws5m.on('message', handleMessage('5m', `–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è 5-–º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞ –≤ ${new Date().toLocaleTimeString()}`, 'Five minute transition'));
if (ws1h) ws1h.on('message', handleMessage('1h', `–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è 1-—á–∞—Å–æ–≤–∞—è —Å–≤–µ—á–∞ –≤ ${new Date().toLocaleTimeString()}`, 'One hour transition'));
if (ws4h) ws4h.on('message', handleMessage('4h', `–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è 4-—á–∞—Å–æ–≤–∞—è —Å–≤–µ—á–∞ –≤ ${new Date().toLocaleTimeString()}`, 'Four hour transition'));
if (ws1d) ws1d.on('message', handleMessage('1d', `–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è 1-–¥–Ω–µ–≤–Ω–∞—è —Å–≤–µ—á–∞ –≤ ${new Date().toLocaleTimeString()}`, 'One day transition'));
if (ws1M) ws1M.on('message', handleMessage('1M', `–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è 1-–º–µ—Å—è—á–Ω–∞—è —Å–≤–µ—á–∞ –≤ ${new Date().toLocaleTimeString()}`, 'One month transition'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
const handleError = (interval) => (error) => {
  console.error(`–û—à–∏–±–∫–∞ WebSocket ${interval}: ${error.message}`);
};

if (ws1m) ws1m.on('error', handleError('1m'));
if (ws2m) ws2m.on('error', handleError('2m'));
if (ws5m) ws5m.on('error', handleError('5m'));
if (ws1h) ws1h.on('error', handleError('1h'));
if (ws4h) ws4h.on('error', handleError('4h'));
if (ws1d) ws1d.on('error', handleError('1d'));
if (ws1M) ws1M.on('error', handleError('1M'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const handleClose = (interval) => () => {
  console.log(`WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${interval} –∑–∞–∫—Ä—ã—Ç–æ`);
};

if (ws1m) ws1m.on('close', handleClose('1m'));
if (ws2m) ws2m.on('close', handleClose('2m'));
if (ws5m) ws5m.on('close', handleClose('5m'));
if (ws1h) ws1h.on('close', handleClose('1h'));
if (ws4h) ws4h.on('close', handleClose('4h'));
if (ws1d) ws1d.on('close', handleClose('1d'));
if (ws1M) ws1M.on('close', handleClose('1M'));
